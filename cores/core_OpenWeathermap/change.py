import aiogram
import asyncio
# import requests
from io import BytesIO
from PIL import Image
import re

import aiohttp
# -------------------------------- –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
from config_pack.configs import *

# ----------------------------------------------------------------------------------------------------------------------

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–≥–æ–¥—ã
# def interpret_weather(data):
#     weather_description = data['weather'][0]['description']
#     temperature = data['main']['temp']
#     feels_like = data['main']['feels_like']
#     temp_min = data['main']['temp_min']
#     temp_max = data['main']['temp_max']
#     pressure = data['main']['pressure']
#     humidity = data['main']['humidity']
#     wind_speed = data['wind']['speed']
#     clouds = data['clouds']['all']
#
#     # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤—ã–≤–æ–¥–∞
#     output = (f"–ü–æ–≥–æ–¥–∞ –≤ {data['name']}, {data['sys']['country']}: "
#               f"{weather_description},\n"
#               f"—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C),\n"
#               f"–º–∏–Ω/–º–∞–∫—Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp_min}/{temp_max}¬∞C,\n"
#               f"–∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ: {pressure} –≥–ü–∞,\n"
#               f"–≤–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%,\n"
#               f"—Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å,\n"
#               f"–æ–±–ª–∞—á–Ω–æ—Å—Ç—å: {clouds}%")
#
#     return output


# –ú–∞–ø–ø–∏–Ω–≥ –∏–∫–æ–Ω–æ–∫ –ø–æ–≥–æ–¥—ã –Ω–∞ —ç–º–æ–¥–∑–∏
icon_to_emoji = {
    '01d': '‚òÄÔ∏è', '01n': 'üåë',  # —è—Å–Ω–æ–µ –Ω–µ–±–æ
    '02d': 'üå§', '02n': 'üå•',  # –Ω–µ–º–Ω–æ–≥–æ –æ–±–ª–∞—á–Ω–æ
    '03d': '‚òÅÔ∏è', '03n': '‚òÅÔ∏è',  # –æ–±–ª–∞—á–Ω–æ
    '04d': 'üå•', '04n': 'üå•',  # –æ—á–µ–Ω—å –æ–±–ª–∞—á–Ω–æ
    '09d': 'üåß', '09n': 'üåß',  # –¥–æ–∂–¥—å
    '10d': 'üå¶', '10n': 'üåß',  # —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å
    '11d': '‚õà', '11n': '‚õà',  # –≥—Ä–æ–∑–∞
    '13d': '‚ùÑÔ∏è', '13n': '‚ùÑÔ∏è',  # —Å–Ω–µ–≥
    '50d': 'üå´', '50n': 'üå´',  # —Ç—É–º–∞–Ω
}


async def get_icon(icon: str):
    """
    –ü–æ–ª—É—á–∞–µ–º URL-—Å—Ç—Ä–æ–∫—É –∏–∫–æ–Ω–∫–∏ –æ—Ç —Å–µ—Ä–µ—Ä–∞ –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –∏–∑ json
    01n.png -> 01d
    """

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–º–µ–Ω—ã 'n' –Ω–∞ 'd'
    icon_new = re.sub(r'n', 'd', icon)
    url_icon = (f'https://openweathermap.org/img/wn/{icon_new}@2x.png')

    # async with aiohttp.ClientSession() as session:
    #     async with session.get(url_icon) as response:
    #
    #         icon_data = await response.read()
    #         icon_png = Image.open(BytesIO(icon_data))
    #
    #         # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–∞–π—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫
    #         img_byte_arr = BytesIO()
    #         icon_png.save(img_byte_arr, format='PNG')
    #         img_byte_arr.seek(0)
    #
    # return img_byte_arr
    return url_icon


async def get_icon_emoji(icon: str):
    """
    –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç–º–æ–¥–∑–∏ –¥–ª—è –∏–∫–æ–Ω–∫–∏ –ø–æ–≥–æ–¥—ã
    """
    icon_emoji = icon_to_emoji.get(icon, '')
    return icon_emoji


async def get_country_coordinate(API_WEATHER, input_city_name, input_limit=None):
    """
    –£–∑–Ω–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞
    :param API_WEATHER: API –∫–ª—é—á –¥–ª—è OpenWeatherMap
    :param input_city_name: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
    :param input_limit: –õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)
    :return: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã

    """

    if input_limit is None:

        url = (f'http://api.openweathermap.org/geo/1.0/direct?q={input_city_name}&appid={API_WEATHER}')

    else:

        url = (
            f'http://api.openweathermap.org/geo/1.0/direct?q={input_city_name}&limit={input_limit}&appid={API_WEATHER}'
        )

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            data = await response.json()
            if data:
                return data[0]['lat'], data[0]['lon'], data[0].get('country')
            else:
                print("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None, None, None

                # raise ValueError("–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")


async def get_weather_by_coordinate(lat, lon, API_WEATHER, url_type_prognosis: str):
    """
     –£–∑–Ω–∞–µ–º –ø–æ–≥–æ–¥—É –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º.

    :param lat: –®–∏—Ä–æ—Ç–∞
    :param lon: –î–æ–ª–≥–æ—Ç–∞
    :param API_WEATHER: API –∫–ª—é—á –¥–ª—è OpenWeatherMap
    :return: –î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ

    metric  - units	–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ	–î–æ—Å—Ç—É–ø–Ω—ã –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è. standard, metric –∏ imperial –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è.
    cnt - –ß—Ç–æ–±—ã –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ API, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ cnt.



    """

    # –ü–æ —É—Å–ª–æ–≤–∏—é –≤—ã–¥–∞–µ–º —Ç–∏–ø  url –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω–æ–≥–æ —Ä–æ–¥–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º json

    if url_type_prognosis == 'now':  # –ü—Ä–æ–≥–Ω–æ–∑ —Å–µ–π—á–∞—Å +

        url = f'https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={API_WEATHER}&units=metric'

    elif url_type_prognosis == '5day':  # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ 3 —á–∞—Å–∞ + (–≤ –Ω–∞—à–µ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ = 48 —á–∞—Å–æ–≤).

        # –ó–∞–ø—Ä–æ—Å –ø–æ —ç—Ç–æ–º—É URL –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã —Å —á–∞—Å–æ–≤—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 48 —á–∞—Å–æ–≤ –∏ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ,
        # –∏—Å–∫–ª—é—á–∞—è –¥–∞–Ω–Ω—ã–µ –ø–æ –º–∏–Ω—É—Ç–∞–º –∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã.
        url = (f'https://api.openweathermap.org/data/2.5/onecall?lat={lat}&lon={lon}&exclude=minutely,'
               f'daily&appid={API_WEATHER}&units=metric')

        # minutely: –ò—Å–∫–ª—é—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –ø–æ –º–∏–Ω—É—Ç–∞–º.
        # –í –∑–∞–ø—Ä–æ—Å–µ /data/2.5/onecall –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É,
        #  –Ω–æ –µ—Å–ª–∏ –≤–∞–º –Ω–µ –Ω—É–∂–Ω—ã —Ç–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ, –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–∫–ª—é—á–∏—Ç—å –∏—Ö —Å –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.

        # daily: –ò—Å–∫–ª—é—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –ø–æ –¥–Ω—è–º.
        # –í –∑–∞–ø—Ä–æ—Å–µ /data/2.5/onecall –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥.
        # –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—á–∞—Å–æ–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑, –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–∫–ª—é—á–∏—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ.

    # elif url_type_prognosis == 'week':  # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é +

    # url = (f'https://api.openweathermap.org/data/2.5/onecall?lat={lat}&lon={lon}&exclude=current,minutely,hourly,'
    #        f'alerts&appid={API_WEATHER}&units=metric&lang=ru')

    # elif url_type_prognosis == 'in_date':  # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–∞—Ç—É

    # url = f'https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={API_WEATHER}&units=metric'

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            data = await response.json()
            return data

    # prognosis = []
    # for day in data['daily']:
    #     date = datetime.datetime.fromtimestamp(day['dt']).strftime('%Y-%m-%d')
    #     temperature_day = day['temp']['day']
    #     temperature_night = day['temp']['night']
    #     description = day['weather'][0]['description']
    #     icon = day['weather'][0]['icon']
    #     icon_url = await get_icon_url(icon)
    #
    #     prognosis.append(f"{date} - {description}, –¥–Ω—ë–º: {temperature_day}¬∞C, –Ω–æ—á—å—é: "
    #                      f"{temperature_night}¬∞C, [–ò–∫–æ–Ω–∫–∞]({icon_url})")


# –í—ã–¥–∞—Ç—å –ø–æ–≥–æ–¥—É (json –Ω–∞ –≤—ã—Ö–æ–¥–µ)
async def get_weather(input_city_name, API_WEATHER, url_type_prognosis: str = 'now'):
    try:

        # 1. –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞
        lat, lon, country_code = await get_country_coordinate(API_WEATHER, input_city_name, input_limit=1)

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –≤ json
        weather_data = await get_weather_by_coordinate(lat, lon, API_WEATHER, url_type_prognosis)
        return weather_data

    except Exception as e:
        print(f'–û—à–∏–±–∫–∞: {e}')

# ----------------------------------------------------------------------------------------------------------------------
# f'http://api.openweathermap.org/geo/1.0/direct?q={input_city_name},
# {state code},{country code}&limit={limit}&appid={get_api_weather}')

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã–∑–æ–≤–∞ API –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
# q	—Ç—Ä–µ–±—É–µ—Ç—Å—è.
# –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∫–æ–¥ —à—Ç–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –°–®–ê) –∏ –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.
# –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–¥—ã —Å—Ç—Ä–∞–Ω ISO 3166.

# appid	—Ç—Ä–µ–±—É–µ—Ç—Å—è.
# –í–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á API (–≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –µ–≥–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–≤–æ–µ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –≤–æ –≤–∫–ª–∞–¥–∫–µ "–ö–ª—é—á API")

# limit	–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π –≤ –æ—Ç–≤–µ—Ç–µ API (–≤ –æ—Ç–≤–µ—Ç–µ API –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –¥–æ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
